---------------------------------------------SQL Challenge 3 
-- Customer Insights
------ BY SANNIDHYA DAS
--------------------- Creating tables and inserting data into them

CREATE TABLE country (
country_id INT PRIMARY KEY,
country_name VARCHAR(50),
head_office VARCHAR(50)
);
--------------------
INSERT INTO country (country_id, country_name, head_office)
VALUES (1, 'UK', 'London'),
(2, 'USA', 'New York'),
(3, 'China', 'Beijing');
--------------------
CREATE TABLE customers (
customer_id INT PRIMARY KEY,
first_shop DATE,
age INT,
rewards VARCHAR(50),
can_email VARCHAR(50)
);
--------------------
INSERT INTO customers (customer_id, first_shop, age, rewards, can_email)
VALUES (1, '2022-03-20', 23, 'yes', 'no'),
(2, '2022-03-25', 26, 'no', 'no'),
(3, '2022-04-06', 32, 'no', 'no'),
(4, '2022-04-13', 25, 'yes', 'yes'),
(5, '2022-04-22', 49, 'yes', 'yes'),
(6, '2022-06-18', 28, 'yes', 'no'),
(7, '2022-06-30', 36, 'no', 'no'),
(8, '2022-07-04', 37, 'yes', 'yes');
--------------------
CREATE TABLE orders (
order_id INT PRIMARY KEY,
customer_id INT,
date_shop DATE,
sales_channel VARCHAR(50),
country_id INT,
FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
FOREIGN KEY (country_id) REFERENCES country(country_id)
);
--------------------
INSERT INTO orders (order_id, customer_id, date_shop, sales_channel, country_id)
VALUES (1, 1, '2023-01-16', 'retail', 1),
(2, 4, '2023-01-20', 'retail', 1),
(3, 2, '2023-01-25', 'retail', 2),
(4, 3, '2023-01-25', 'online', 1),
(5, 1, '2023-01-28', 'retail', 3),
(6, 5, '2023-02-02', 'online', 1),
(7, 6, '2023-02-05', 'retail', 1),
(8, 3, '2023-02-11', 'online', 3);
--------------------
CREATE TABLE products (
product_id INT PRIMARY KEY,
category VARCHAR(50),
price NUMERIC(5,2)
);
--------------------
INSERT INTO products (product_id, category, price)
VALUES (1, 'food', 5.99),
(2, 'sports', 12.49),
(3, 'vitamins', 6.99),
(4, 'food', 0.89),
(5, 'vitamins', 15.99);
--------------------
CREATE TABLE baskets (
order_id INT,
product_id INT,
FOREIGN KEY (order_id) REFERENCES orders(order_id),
FOREIGN KEY (product_id) REFERENCES products(product_id)
);
--------------------
INSERT INTO baskets (order_id, product_id)
VALUES (1, 1),
(1, 2),
(1, 5),
(2, 4),
(3, 3),
(4, 2),
(4, 1),
(5, 3),
(5, 5),
(6, 4),
(6, 3),
(6, 1),
(7, 2),
(7, 1),
(8, 3),
(8, 3);

------------------------------------Questions and Answers----------------------------------------------------------------
-- Q1. What are the names of all the countries in the country table?

SELECT country_name FROM country; 

-- Q2. What is the total number of customers in the customers table?

SELECT COUNT(*) FROM customers;

-- Q3. What is the average age of customers who can receive marketing
-- emails (can_email is set to 'yes')?

SELECT ROUND(AVG(age),2) AS avg_age
FROM customers
WHERE can_email = 'yes';

-- Q4. How many orders were made by customers aged 30 or older?

WITH abc AS (
	
SELECT customers.customer_id,age,order_id
FROM customers
JOIN orders ON customers.customer_id=orders.customer_id
WHERE age >=30
GROUP BY customers.customer_id,orders.order_id
ORDER BY 1
)
SELECT abc.* ,COUNT(baskets.order_id) AS total_orders
FROM abc 
LEFT JOIN baskets ON abc.order_id=baskets.order_id
GROUP BY abc.customer_id,abc.age,abc.order_id;

-- Q5. What is the total revenue generated by each product category?

SELECT products.product_id,category,
COUNT(baskets.product_id) AS total_orders,
ROUND(COUNT(baskets.product_id)*price,2) AS total_revenue
FROM products
JOIN baskets ON products.product_id=baskets.product_id
GROUP BY products.product_id 
ORDER BY category

-- modification for getting the compact answer

WITH abcd AS (

SELECT category,
COUNT(baskets.product_id) AS total_orders,
ROUND(COUNT(baskets.product_id)*price,2) AS total_revenue
FROM products
JOIN baskets ON products.product_id=baskets.product_id
GROUP BY products.category,products.price
ORDER BY category
)
SELECT category,SUM(total_orders) AS total_orders,
SUM(total_revenue) AS total_revenue
FROM abcd
GROUP BY abcd.category

-- Q6. What is the average price of products in the 'food' category?

-- 1st try

SELECT category, ROUND(AVG(price),2) AS avg_price
FROM products
WHERE category = 'food'
GROUP BY category;

-- 2nd try

WITH abcd AS (

SELECT category,
COUNT(baskets.product_id) AS total_orders,
ROUND(COUNT(baskets.product_id)*price,2) AS total_revenue
FROM products
JOIN baskets ON products.product_id=baskets.product_id
GROUP BY products.category,products.price
ORDER BY category
)
SELECT category,SUM(total_orders) AS total_orders,
SUM(total_revenue) AS total_revenue,
ROUND(SUM(total_revenue)/SUM(total_orders),2) AS avg_price
FROM abcd
WHERE category = 'food'
GROUP BY abcd.category;

-- Q7. How many orders were made in each sales channel
-- (sales_channel column) in the orders table?

SELECT sales_channel,COUNT(baskets.order_id) AS total_orders
FROM orders
JOIN baskets ON orders.order_id=baskets.order_id
GROUP BY sales_channel;

-- Q8. What is the date of the latest order made by a customer who can 
-- receive marketing emails?

SELECT customers.customer_id,date_shop,customers.can_email
FROM orders
JOIN customers ON customers.customer_id=orders.customer_id
WHERE can_email='yes'
ORDER BY 2 DESC
LIMIT 1;

-- Another way ------

SELECT MAX(date_shop) AS latest_order_date
FROM orders
RIGHT JOIN customers ON customers.customer_id=orders.customer_id
WHERE can_email='yes'

-- Q9. What is the name of the country with the highest number of orders?

SELECT country.country_id,country_name,
COUNT(baskets.order_id) AS total_num_of_orders
FROM country
JOIN orders ON country.country_id=orders.country_id
JOIN baskets ON orders.order_id=baskets.order_id
GROUP BY country.country_id
ORDER BY 3 DESC
LIMIT 1;

-- Q10. What is the average age of customers who made orders in the 
-- 'vitamins' product category?

WITH abcde AS(

SELECT DISTINCT(customers.customer_id),age,products.category
FROM customers
JOIN orders ON customers.customer_id=orders.customer_id
JOIN baskets ON orders.order_id=baskets.order_id
JOIN products ON baskets.product_id=products.product_id
WHERE category='vitamins'
)
SELECT ROUND(AVG(age)) AS average_age,category FROM abcde
GROUP BY abcde.category;





-------------------------------------THANK YOU -----------------------------







































